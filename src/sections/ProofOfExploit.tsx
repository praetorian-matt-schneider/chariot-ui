import { ReactNode, useEffect, useMemo, useState } from 'react';
import { CommandLineIcon, DocumentTextIcon } from '@heroicons/react/24/outline';
import { toast } from 'sonner';

import { Button } from '@/components/Button';
import { Loader } from '@/components/Loader';
import { Modal } from '@/components/Modal';
import { Tabs } from '@/components/Tab';
import { NoData } from '@/components/ui/NoData';
import { useGetFile } from '@/hooks/useFiles';
import { copyToClipboard } from '@/utils/copyToClipboard.util';
import { getDescription } from '@/utils/risk.util';
import { StorageKey } from '@/utils/storage/useStorage.util';
import { useSearchParams } from '@/utils/url.util';

export function ProofOfExploit() {
  const { searchParams, removeSearchParams } = useSearchParams();
  const rawRiskComposite = searchParams.get(StorageKey.POE) ?? '';
  const riskComposite =
    rawRiskComposite && decodeURIComponent(rawRiskComposite);

  const { data: file, status: fileStatus } = useGetFile({
    name: 'proofs/' + riskComposite,
  });

  const proofOfExploit = useMemo(() => {
    return getDescription(file);
  }, [file]);

  const tabs = useMemo(() => {
    return proofOfExploit ? Object.keys(proofOfExploit) : [];
  }, [proofOfExploit]);

  const [selectedTab, setSelectedTab] = useState(tabs[0]);

  useEffect(() => {
    setSelectedTab(tabs[0]);
  }, [tabs]);

  const handleCopyAll = () => {
    if (proofOfExploit) {
      copyToClipboard(`${proofOfExploit[selectedTab]}`);
      toast('Content copied to clipboard.');
    }
  };

  return (
    <Modal
      title="Proof of Exploit"
      open={Boolean(riskComposite)}
      onClose={() => removeSearchParams(StorageKey.POE)}
      size="6xl"
      className="h-[60vh] p-0"
      icon={<DocumentTextIcon className="size-6 text-default-light" />}
      footer={{
        left: (
          <div className="flex gap-2">
            {file?.['curl-command'] && (
              <Button
                styleType="secondary"
                startIcon={
                  <CommandLineIcon className="size-4 text-default-light" />
                }
                className="text-nowrap"
                onClick={() => {
                  copyToClipboard(file['curl-command']);
                  toast('Command copied to clipboard.');
                }}
              >
                Copy Command
              </Button>
            )}
            <Button
              styleType="secondary"
              startIcon={
                <DocumentTextIcon className="size-4 text-default-light" />
              }
              className="text-nowrap"
              isLoading={fileStatus === 'pending'}
              disabled={!proofOfExploit}
              onClick={handleCopyAll}
            >
              Copy
            </Button>
          </div>
        ),
      }}
    >
      <Loader isLoading={fileStatus === 'pending'} type="spinner">
        {!proofOfExploit && <NoData title="No Proof of exploit found." />}
        {proofOfExploit && (
          <div className="h-full">
            <Tabs
              tabs={tabs.map(tab => ({
                label: tab,
                id: tab,
                Content: () => (
                  <code className="prose whitespace-pre-wrap text-xs">
                    {proofOfExploit[tab] as ReactNode}
                  </code>
                ),
              }))}
              defaultValue={tabs[0]}
              value={selectedTab}
              onChange={setSelectedTab}
              className=""
              tabWrapperclassName="w-[200px]"
              contentWrapperClassName=""
            />
          </div>
        )}
      </Loader>
    </Modal>
  );
}
